name: Deploy to Prod Workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test_backend:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          echo "PYTHON VERSION IS $(python --version)"
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
      - name: Run Unit tests
        run: |
          # To extract percentage: https://unix.stackexchange.com/questions/690810/using-sed-to-parse-score
          COVERAGE=$(pytest --verbose --doctest-modules --color=yes --cov=app --cov-report=term | grep TOTAL | sed 's/.*[[:blank:]]//')
          echo "overall test coverage is $COVERAGE"
          COVERAGE_REMOVE_PERCENT=$(echo $COVERAGE | sed 's/\%//g')
          if [[ $COVERAGE_REMOVE_PERCENT -lt 75 ]]
          then
            echo "COVERAGE IS BELOW THRESHOLD";
            # exit 1
          else 
            echo "COVERAGE IS ABOVE THRESHOLD, CONTINUING";
          fi
  lint_backend:
      name: Lint Backend
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          echo "PYTHON VERSION IS $(python --version)"
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
      - name: Run Linting
        run: |
          pylint --fail-under=$FAIL_UNDER backend/app
        env:
          FAIL_UNDER: 4
  push_to_registry:
    if: github.ref_name == 'main'
    # if: false
    name: Push Docker image to Docker hub
    runs-on: ubuntu-latest
    needs:
      - test_backend
      - lint_backend
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: dockedupstream/digitaloceanpythondevelopment
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=raw,value=latest
      - name: Generate a timestamp # Not used right now
        run: echo "CACHE_BUST=$(date +%s)" >> $GITHUB_ENV
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          # Action uses this to find the Docker file: ({context}/Dockerfile)
          context: backend/build
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CACHE_BUST=${{ env.CACHE_BUST }}
  deploy_to_server_without_docker:
      # if: github.ref_name == 'main'
      if: false
      name: Deploy to Digital Ocean Droplet
      runs-on: ubuntu-latest
      environment: production
      needs:
        - test_backend
        - lint_backend
      env:
        DO_DROPLET_IP: ${{ vars.DO_DROPLET_IP }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Set up SSH
          uses: webfactory/ssh-agent@v0.9.0
          with:
            ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        - name: Deploy code
          run: |
            ssh -o StrictHostKeyChecking=no root@$DO_DROPLET_IP << 'EOF'
              cd /root/react-flask-custom-blog
              git pull origin main
              source /root/blog-venv/bin/activate
              pip install -r backend/requirements.txt || exit 1 # Exit immediately if a command exits with a non-zero status
              sudo systemctl restart blog.service
            EOF
  deploy_to_server_with_docker:
    if: github.ref_name == 'main'
    name: Deploy to Digital Ocean Droplet
    runs-on: ubuntu-latest
    environment: production
    needs:
      - test_backend
      - lint_backend
      - push_to_registry
    env:
      DO_DROPLET_IP: ${{ vars.DO_DROPLET_IP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
      - name: Deploy code
        run: |
          ssh -o StrictHostKeyChecking=no root@$DO_DROPLET_IP << 'EOF'
            cd /root/react-flask-custom-blog
            git pull origin main
            ls backend
            bash -s < backend/deploy.sh
          EOF
        env:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

  deploy_frontend_without_docker:
    # if: github.ref_name == 'main'
    # if: false
    name: Deploy React to Digital Ocean Droplet
    runs-on: ubuntu-latest
    environment: production
    needs:
      - test_backend
      - lint_backend
    env:
      DO_DROPLET_IP: ${{ vars.DO_DROPLET_IP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
      - name: Deploy code
        run: |
          ssh -o StrictHostKeyChecking=no root@$DO_DROPLET_IP << 'EOF'
            cd /root/react-flask-custom-blog/frontend/react-flask-custom-blog
            git pull origin main
            npm install
            export NODE_OPTIONS="--max-old-space-size=4096" # to fix error FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
            npm run build
            # pm2 serve /path/to/your/project/build 3000 --name "react-app" --spa
            pm2 restart react-app || pm2 start "npx serve -s dist" --name react-app # If pm2 restart fails (e.g., the process isn't found), this command will start the process
            pm2 save # Ensures the updated PM2 process list is saved for persistence across server reboots
          EOF
      




